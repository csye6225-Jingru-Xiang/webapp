name: Build and Configure

env:
  ARTIFACT_NAME: csye6225-webapp-deployment-${{ github.sha }}.zip
  CODEDEPLOY_APPLICATION_NAME: csye6225-webapp-deployment
  CODEDEPLOY_APPLICATION_GROUP_NAME: csye6225-webapp-deployment-group
  
# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  java_maven_tests:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    name: Install Java and maven, run unit tests
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Cache Maven Packages
        uses: actions/cache@v2
        with:
          path: ~/.m2
          key: ${{ runner.os }}-m2-${{ hashFiles('**/pom.xml') }}
          restore-keys: ${{ runner.os }}-m2
      - name: Build with Maven
        run: mvn -B package --file pom.xml
      - name: Unit Test
        run: mvn test
      - name: Validate Packer Template
        uses: hashicorp/packer-github-actions@master
        with:
          command: validate
          arguments: -syntax-only
          target: ./ami/aws-ubuntu.pkr.hcl
  build:
    name: Build Artifact and AMI
    runs-on: ubuntu-latest
    needs: java_maven_tests
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v2
      - name: Set Up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: maven
      - name: Build with Maven
        run: mvn -B package -DskipTests --file pom.xml
      - name: Display structure of downloaded files
        run: ls -R
      - name: Build Artifact
        run: |
          mkdir codedeploy_artifact
          zip -r ${{ env.ARTIFACT_NAME }} target/webapp-1.0-SNAPSHOT.jar codedeploy/*.sh appspec.yml ami/cloudwatch-config.json
          pwd
          ls -al
          mv ${{ env.ARTIFACT_NAME }} codedeploy_artifact/
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
      - name: Copy Artifact to S3
        run: |
          aws s3 sync ./codedeploy_artifact s3://xjrbucket
      - name: Init Packer
        run: packer init ./ami
      - name: Build AMI with Packer
        run: packer build ./ami/aws-ubuntu.pkr.hcl
        env:
          PACKER_LOG: 1
      - name: Code Deploy Api Call
        run: |
          output=$(aws deploy create-deployment \
            --application-name ${{ env.CODEDEPLOY_APPLICATION_NAME }} \
            --deployment-config-name CodeDeployDefault.AllAtOnce \
            --deployment-group-name ${{ env.CODEDEPLOY_APPLICATION_GROUP_NAME }} \
            --description "CSYE6225 CodeDeploy" \
            --s3-location bucket=xjrbucket,key=${{ env.ARTIFACT_NAME }},bundleType=zip \
            --region us-east-1 \
            --output json)
            
          echo $output
        
          dId=$(echo $output | jq -r '.deploymentId')
          aws deploy wait deployment-successful --deployment-id $dId




